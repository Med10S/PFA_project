# Script PowerShell pour d√©marrer le service de d√©tection en temps r√©el
# start_detection_service.ps1

Write-Host "üöÄ D√©marrage du Service de D√©tection d'Intrusion Temps R√©el" -ForegroundColor Green
Write-Host "=============================================================" -ForegroundColor Green

# V√©rification de Python
Write-Host "üîç V√©rification de Python..." -ForegroundColor Yellow
try {
    $pythonVersion = python --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Python trouv√©: $pythonVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Python non trouv√©. Veuillez installer Python 3.8+" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de Python" -ForegroundColor Red
    exit 1
}

# V√©rification du r√©pertoire de travail
$currentDir = Get-Location
Write-Host "üìÅ R√©pertoire de travail: $currentDir" -ForegroundColor Cyan

# V√©rification des fichiers requis
$requiredFiles = @(
    "realtime_detection_service.py",
    "config.py", 
    "/functions/model_loader.py",
    "/functions/preprocessing.py",
    "/functions/ensemble_models.py",
    "requirements.txt"
)

Write-Host "üîç V√©rification des fichiers requis..." -ForegroundColor Yellow
$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host "‚ùå Fichiers manquants: $($missingFiles -join ', ')" -ForegroundColor Red
    exit 1
}

# V√©rification des mod√®les
Write-Host "ü§ñ V√©rification des mod√®les pr√©-entra√Æn√©s..." -ForegroundColor Yellow
$modelFiles = @(
    "models/KNN_best.pkl",
    "models/mlp_best.pkl", 
    "models/xgb_best.pkl",
    "models/scaler.pkl",
    "models/label_encoders.pkl"
)

$missingModels = @()
foreach ($model in $modelFiles) {
    if (Test-Path $model) {
        Write-Host "‚úÖ $model" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $model manquant" -ForegroundColor Red
        $missingModels += $model
    }
}

if ($missingModels.Count -gt 0) {
    Write-Host "‚ùå Mod√®les manquants: $($missingModels -join ', ')" -ForegroundColor Red
    Write-Host "Assurez-vous d'avoir ex√©cut√© l'entra√Ænement des mod√®les d'abord." -ForegroundColor Yellow
    exit 1
}

# Installation des d√©pendances
Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
try {
    pip install -r requirements.txt --quiet
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors de l installation: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# V√©rification du port
$port = 8000
Write-Host "üîå V√©rification du port $port..." -ForegroundColor Yellow
try {
    $portTest = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
    if ($portTest) {
        Write-Host "‚ö†Ô∏è  Le port $port est d√©j√† utilis√©" -ForegroundColor Yellow
        $response = Read-Host "Voulez-vous continuer quand m√™me ? (o/N)"
        if ($response -ne "o" -and $response -ne "O") {
            Write-Host "‚ùå D√©marrage annul√©" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚úÖ Port $port disponible" -ForegroundColor Green
    }
} catch {
    Write-Host "‚úÖ Port $port semble disponible" -ForegroundColor Green
}

# D√©marrage du service
Write-Host "üöÄ D√©marrage du service FastAPI..." -ForegroundColor Green
Write-Host "Service sera disponible sur: http://localhost:$port" -ForegroundColor Cyan
Write-Host "Documentation API: http://localhost:$port/docs" -ForegroundColor Cyan
Write-Host "" -ForegroundColor White
Write-Host "Appuyez sur Ctrl+C pour arr√™ter le service" -ForegroundColor Yellow
Write-Host "=============================================================" -ForegroundColor Green

try {
    # D√©marrage avec uvicorn
    uvicorn realtime_detection_service:app --host 0.0.0.0 --port $port --reload
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage: $($_.Exception.Message)" -ForegroundColor Red
    
    # Alternative avec python directement
    Write-Host "üîÑ Tentative de d√©marrage alternatif..." -ForegroundColor Yellow
    try {
        python realtime_detection_service.py
    } catch {
        Write-Host "‚ùå Impossible de d√©marrer le service: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

Write-Host "Service arr√™t√©" -ForegroundColor Yellow
