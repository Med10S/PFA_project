# Docker Compose pour Système IDS Distribué
# Architecture: Capture -> Stream -> Process -> Detect -> Alert
version: '3.8'

services:
  # ================================
  # CAPTURE DE PAQUETS
  # ================================  
  packet-capture:
    build:
      context: ..
      dockerfile: docker/services/capture/Dockerfile
    container_name: ids-packet-capture
    network_mode: host # Nécessaire pour capture réseau
    privileged: true # Requis pour capture de paquets
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ../shared:/app/shared
      - ../logs:/app/logs
      - packet_buffer:/app/buffer
    environment:
      - INTERFACE=eth0
      - CAPTURE_INTERVAL=10 # Secondes (pas 1 minute)
      - BUFFER_SIZE=1000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - monitoring
    restart: unless-stopped
    networks:
      - ids-network

  # ================================
  # TRAITEMENT DES FEATURES
  # ================================   
  feature-extractor:
    build:
      context: ..
      dockerfile: docker/services/extractor/Dockerfile
    container_name: ids-feature-extractor
    volumes:
      - ../shared:/app/shared
      - ../logs:/app/logs
      - ../nfstream_test:/app/extractor
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROCESSING_WORKERS=4
      - BATCH_SIZE=100
      - API_ENDPOINT=http://ml-api:8001
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - packet-capture
    restart: unless-stopped
    networks:
      - ids-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # ================================
  # API ML IDS (votre service existant)
  # ================================    
  ml-api:
    build:
      context: ..
      dockerfile: docker/services/ml-api/Dockerfile
    container_name: ids-ml-api
    ports:
      - "5000:5000"
    volumes:
      - ../models:/app/models
      - ../functions:/app/functions
      - ../logs:/app/logs
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ids-network
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
  # ================================
  # GESTIONNAIRE D'ALERTES
  # ================================
  alert-manager:
    build:
      context: ..
      dockerfile: docker/services/alerts/Dockerfile
      container_name: ids-alert-manager
    ports:
      - "9003:9003"
    volumes:
      - ../logs:/app/logs
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ids-network

  # ================================
  # REDIS (Communication entre services)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ids-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    restart: unless-stopped
    networks:
      - ids-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # MONITORING ET MÉTRIQUES
  # ================================
  monitoring:
    build:
      context: ..
      dockerfile: docker/services/monitoring/Dockerfile
      container_name: ids-monitoring
    ports:
      - "9000:9000"
    volumes:
      - ../logs:/app/logs
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ids-network
  # ================================
  # BACKUP ET ARCHIVAGE
  # ================================
  backup-service:
    build:
      context: ..
      dockerfile: docker/services/backup/Dockerfile
      container_name: ids-backup
    ports:
      - "9004:9004"
    volumes:
      - ../logs:/app/logs
      - ../backups:/app/backups
      - ../shared:/app/shared
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BACKUP_INTERVAL_HOURS=6
      - RETENTION_DAYS=30
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ids-network

  # ================================
  # PROXY NGINX (Load Balancer)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: ids-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ml-api
      - alert-manager
      - monitoring
    restart: unless-stopped
    networks:
      - ids-network

# ================================
# VOLUMES PERSISTANTS
# ================================
volumes:
  redis_data:
    driver: local
  packet_buffer:
    driver: local

# ================================
# RÉSEAUX
# ================================
networks:
  ids-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
